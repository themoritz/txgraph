[package]
name = "txgraph"
version = "0.1.0"
authors = ["Moritz Drexl <mdrexl@fastmail.fm>"]
edition = "2021"
rust-version = "1.76"

[features]
# To use profiling, just sprinkle `puffin::profile_function!()` calls in your code.
#
# Then run like this:
# $ cargo run --release --features profiling
profiling = ["puffin", "puffin_http"]

[dependencies]
egui = "0.31"
egui_extras = { version = "0.31", default-features = false, features = ["serde"] }
eframe = { version = "0.31", default-features = false, features = ["glow", "persistence"] }
ehttp = "0.5"
serde = { version = "1", features = ["derive"] }
serde_json = "1.0"
hex = "0.4"
chrono = { version = "0.4", features = ["serde"] }
base64 = "0.22"
log = "0.4"
lru = "0.13"
flume = "0.11"
uuid = { version = "1.16", features = ["js", "v7", "serde"] }

# native:
[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
env_logger = "0.10"
rand = "0.8.5"
puffin = {version = "0.19.0", optional = true }
puffin_http = { version = "0.16", optional = true }

# web:
[target.'cfg(target_arch = "wasm32")'.dependencies]
wasm-bindgen-futures = "0.4.42"
wasm-bindgen = "0.2.84"
web-sys = { version = "0.3.69", features = ["console", "Window"] }

[profile.release]
lto = true
opt-level = 'z'

# Optimize all dependencies even in debug builds:
[profile.dev.package."*"]
opt-level = 2
